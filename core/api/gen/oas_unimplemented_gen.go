// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// V1AuthLogoutPost implements POST /v1/auth/logout operation.
//
// Terminates the user session.
//
// POST /v1/auth/logout
func (UnimplementedHandler) V1AuthLogoutPost(ctx context.Context, params V1AuthLogoutPostParams) (r V1AuthLogoutPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthRefreshPost implements POST /v1/auth/refresh operation.
//
// Get new access token.
//
// POST /v1/auth/refresh
func (UnimplementedHandler) V1AuthRefreshPost(ctx context.Context, params V1AuthRefreshPostParams) (r V1AuthRefreshPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthSigninPost implements POST /v1/auth/signin operation.
//
// Signin User.
//
// POST /v1/auth/signin
func (UnimplementedHandler) V1AuthSigninPost(ctx context.Context, req *V1AuthSigninPostReq) (r V1AuthSigninPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthSignupPost implements POST /v1/auth/signup operation.
//
// Signup User.
//
// POST /v1/auth/signup
func (UnimplementedHandler) V1AuthSignupPost(ctx context.Context, req *V1AuthSignupPostReq) (r V1AuthSignupPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1AuthUserGet implements GET /v1/auth/user operation.
//
// Get currently authenticated user.
//
// GET /v1/auth/user
func (UnimplementedHandler) V1AuthUserGet(ctx context.Context) (r V1AuthUserGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogCitiesPost implements POST /v1/catalog/cities operation.
//
// Adds city to catalog
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Admin' or higher.
//
// POST /v1/catalog/cities
func (UnimplementedHandler) V1CatalogCitiesPost(ctx context.Context, req *V1CatalogCitiesPostReq) (r V1CatalogCitiesPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogMeasurementsGet implements GET /v1/catalog/measurements operation.
//
// Возвращает список измерений.
//
// GET /v1/catalog/measurements
func (UnimplementedHandler) V1CatalogMeasurementsGet(ctx context.Context) (r V1CatalogMeasurementsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogObjectsGet implements GET /v1/catalog/objects operation.
//
// Lists all available objects.
//
// GET /v1/catalog/objects
func (UnimplementedHandler) V1CatalogObjectsGet(ctx context.Context) (r V1CatalogObjectsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogObjectsPost implements POST /v1/catalog/objects operation.
//
// Creates catalog object
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Admin' or higher.
//
// POST /v1/catalog/objects
func (UnimplementedHandler) V1CatalogObjectsPost(ctx context.Context, req *V1CatalogObjectsPostReq) (r V1CatalogObjectsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogRegionsPost implements POST /v1/catalog/regions operation.
//
// Adds region to catalog
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Admin' or higher.
//
// POST /v1/catalog/regions
func (UnimplementedHandler) V1CatalogRegionsPost(ctx context.Context, req *V1CatalogRegionsPostReq) (r V1CatalogRegionsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogServicesGet implements GET /v1/catalog/services operation.
//
// Lists all available services.
//
// GET /v1/catalog/services
func (UnimplementedHandler) V1CatalogServicesGet(ctx context.Context) (r V1CatalogServicesGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1CatalogServicesPost implements POST /v1/catalog/services operation.
//
// Creates catalog service
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Admin' or higher.
//
// POST /v1/catalog/services
func (UnimplementedHandler) V1CatalogServicesPost(ctx context.Context, req *V1CatalogServicesPostReq) (r V1CatalogServicesPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1EmployeePost implements POST /v1/employee operation.
//
// Create employee user.
//
// POST /v1/employee
func (UnimplementedHandler) V1EmployeePost(ctx context.Context, req *V1EmployeePostReq) (r V1EmployeePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsContractorsGet implements GET /v1/organizations/contractors operation.
//
// Получить всех исполнителей статусом approve с
// информацией об их профиле.
//
// GET /v1/organizations/contractors
func (UnimplementedHandler) V1OrganizationsContractorsGet(ctx context.Context, params V1OrganizationsContractorsGetParams) (r V1OrganizationsContractorsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsFavouritesFavouriteIDDelete implements DELETE /v1/organizations/favourites/{favouriteID} operation.
//
// Удаление объекта из избранного.
//
// DELETE /v1/organizations/favourites/{favouriteID}
func (UnimplementedHandler) V1OrganizationsFavouritesFavouriteIDDelete(ctx context.Context, params V1OrganizationsFavouritesFavouriteIDDeleteParams) (r V1OrganizationsFavouritesFavouriteIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsGet implements GET /v1/organizations operation.
//
// List all organizations
// Для получения всех организаций (включая
// неверифицированные)
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/organizations
func (UnimplementedHandler) V1OrganizationsGet(ctx context.Context, params V1OrganizationsGetParams) (r V1OrganizationsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDFavouritesGet implements GET /v1/organizations/{organizationID}/favourites operation.
//
// Получение списка избранного.
//
// GET /v1/organizations/{organizationID}/favourites
func (UnimplementedHandler) V1OrganizationsOrganizationIDFavouritesGet(ctx context.Context, params V1OrganizationsOrganizationIDFavouritesGetParams) (r V1OrganizationsOrganizationIDFavouritesGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDFavouritesPost implements POST /v1/organizations/{organizationID}/favourites operation.
//
// Добавление объекта в список избранного.
//
// POST /v1/organizations/{organizationID}/favourites
func (UnimplementedHandler) V1OrganizationsOrganizationIDFavouritesPost(ctx context.Context, req *V1OrganizationsOrganizationIDFavouritesPostReq, params V1OrganizationsOrganizationIDFavouritesPostParams) (r V1OrganizationsOrganizationIDFavouritesPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDGet implements GET /v1/organizations/{organizationID} operation.
//
// Returns organization by id.
//
// GET /v1/organizations/{organizationID}
func (UnimplementedHandler) V1OrganizationsOrganizationIDGet(ctx context.Context, params V1OrganizationsOrganizationIDGetParams) (r V1OrganizationsOrganizationIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDPortfolioGet implements GET /v1/organizations/{organizationID}/portfolio operation.
//
// Получает список всех портфолио для исполнителя.
//
// GET /v1/organizations/{organizationID}/portfolio
func (UnimplementedHandler) V1OrganizationsOrganizationIDPortfolioGet(ctx context.Context, params V1OrganizationsOrganizationIDPortfolioGetParams) (r V1OrganizationsOrganizationIDPortfolioGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDPortfolioPost implements POST /v1/organizations/{organizationID}/portfolio operation.
//
// Добавляет портфолио в профиль исполнителя.
//
// POST /v1/organizations/{organizationID}/portfolio
func (UnimplementedHandler) V1OrganizationsOrganizationIDPortfolioPost(ctx context.Context, req *V1OrganizationsOrganizationIDPortfolioPostReq, params V1OrganizationsOrganizationIDPortfolioPostParams) (r V1OrganizationsOrganizationIDPortfolioPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDProfileBrandPut implements PUT /v1/organizations/{organizationID}/profile/brand operation.
//
// Обновляет название бренда или URL изображения для
// организации.
//
// PUT /v1/organizations/{organizationID}/profile/brand
func (UnimplementedHandler) V1OrganizationsOrganizationIDProfileBrandPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileBrandPutReq, params V1OrganizationsOrganizationIDProfileBrandPutParams) (r V1OrganizationsOrganizationIDProfileBrandPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDProfileContactsPut implements PUT /v1/organizations/{organizationID}/profile/contacts operation.
//
// Обновляет контактные данные для организации.
//
// PUT /v1/organizations/{organizationID}/profile/contacts
func (UnimplementedHandler) V1OrganizationsOrganizationIDProfileContactsPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileContactsPutReq, params V1OrganizationsOrganizationIDProfileContactsPutParams) (r V1OrganizationsOrganizationIDProfileContactsPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDProfileContractorGet implements GET /v1/organizations/{organizationID}/profile/contractor operation.
//
// Возвращает информацию об организации и профиле
// исполнителя.
//
// GET /v1/organizations/{organizationID}/profile/contractor
func (UnimplementedHandler) V1OrganizationsOrganizationIDProfileContractorGet(ctx context.Context, params V1OrganizationsOrganizationIDProfileContractorGetParams) (r V1OrganizationsOrganizationIDProfileContractorGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDProfileContractorPut implements PUT /v1/organizations/{organizationID}/profile/contractor operation.
//
// Обновляет профиль исполнителя.
//
// PUT /v1/organizations/{organizationID}/profile/contractor
func (UnimplementedHandler) V1OrganizationsOrganizationIDProfileContractorPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileContractorPutReq, params V1OrganizationsOrganizationIDProfileContractorPutParams) (r V1OrganizationsOrganizationIDProfileContractorPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDProfileCustomerGet implements GET /v1/organizations/{organizationID}/profile/customer operation.
//
// Возвращает информацию об организации и профиле
// заказчика.
//
// GET /v1/organizations/{organizationID}/profile/customer
func (UnimplementedHandler) V1OrganizationsOrganizationIDProfileCustomerGet(ctx context.Context, params V1OrganizationsOrganizationIDProfileCustomerGetParams) (r V1OrganizationsOrganizationIDProfileCustomerGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDProfileCustomerPut implements PUT /v1/organizations/{organizationID}/profile/customer operation.
//
// Обновляет описание компании или список локаций в
// профиле заказчика.
//
// PUT /v1/organizations/{organizationID}/profile/customer
func (UnimplementedHandler) V1OrganizationsOrganizationIDProfileCustomerPut(ctx context.Context, req *V1OrganizationsOrganizationIDProfileCustomerPutReq, params V1OrganizationsOrganizationIDProfileCustomerPutParams) (r V1OrganizationsOrganizationIDProfileCustomerPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsOrganizationIDTendersGet implements GET /v1/organizations/{organizationID}/tenders operation.
//
// **Без JWT или с ролью "User"**:
// Возвращает тендеры только со статусом "Approved".
// **Если "User" состоит в организации:** возвращает все
// тендеры (с черновиками).
//
// GET /v1/organizations/{organizationID}/tenders
func (UnimplementedHandler) V1OrganizationsOrganizationIDTendersGet(ctx context.Context, params V1OrganizationsOrganizationIDTendersGetParams) (r V1OrganizationsOrganizationIDTendersGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsPortfolioPortfolioIDDelete implements DELETE /v1/organizations/portfolio/{portfolioID} operation.
//
// Удаляет портфолио из профиля исполнителя.
//
// DELETE /v1/organizations/portfolio/{portfolioID}
func (UnimplementedHandler) V1OrganizationsPortfolioPortfolioIDDelete(ctx context.Context, params V1OrganizationsPortfolioPortfolioIDDeleteParams) (r V1OrganizationsPortfolioPortfolioIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1OrganizationsPortfolioPortfolioIDPut implements PUT /v1/organizations/portfolio/{portfolioID} operation.
//
// Обновляет информацию о портфолио в профиле
// исполнителя.
//
// PUT /v1/organizations/portfolio/{portfolioID}
func (UnimplementedHandler) V1OrganizationsPortfolioPortfolioIDPut(ctx context.Context, req *V1OrganizationsPortfolioPortfolioIDPutReq, params V1OrganizationsPortfolioPortfolioIDPutParams) (r V1OrganizationsPortfolioPortfolioIDPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1QuestionnaireGet implements GET /v1/questionnaire operation.
//
// Get all contractor's questionnaire answers with pagination
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/questionnaire
func (UnimplementedHandler) V1QuestionnaireGet(ctx context.Context, params V1QuestionnaireGetParams) (r V1QuestionnaireGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1QuestionnaireOrganizationIDPost implements POST /v1/questionnaire/{organizationID} operation.
//
// Save the contractor's answers to the questionnaire.
//
// POST /v1/questionnaire/{organizationID}
func (UnimplementedHandler) V1QuestionnaireOrganizationIDPost(ctx context.Context, req *V1QuestionnaireOrganizationIDPostReq, params V1QuestionnaireOrganizationIDPostParams) (r V1QuestionnaireOrganizationIDPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1QuestionnaireOrganizationIDStatusGet implements GET /v1/questionnaire/{organizationID}/status operation.
//
// Retrieve the status of a contractor's questionnaire.
//
// GET /v1/questionnaire/{organizationID}/status
func (UnimplementedHandler) V1QuestionnaireOrganizationIDStatusGet(ctx context.Context, params V1QuestionnaireOrganizationIDStatusGetParams) (r V1QuestionnaireOrganizationIDStatusGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1SuggestCityGet implements GET /v1/suggest/city operation.
//
// Suggests a city with provided city name.
//
// GET /v1/suggest/city
func (UnimplementedHandler) V1SuggestCityGet(ctx context.Context, params V1SuggestCityGetParams) (r V1SuggestCityGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1SuggestCompanyGet implements GET /v1/suggest/company operation.
//
// Suggests a company with provided INN.
//
// GET /v1/suggest/company
func (UnimplementedHandler) V1SuggestCompanyGet(ctx context.Context, params V1SuggestCompanyGetParams) (r V1SuggestCompanyGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1SurveyPost implements POST /v1/survey operation.
//
// Respond to a survey.
//
// POST /v1/survey
func (UnimplementedHandler) V1SurveyPost(ctx context.Context, req *V1SurveyPostReq) (r V1SurveyPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersGet implements GET /v1/tenders operation.
//
// **Без JWT или с ролью "User"**:
// Возвращает тендеры только со статусом "Approved".
// **Для сотрудников ("Employee") и выше**:
// Возвращает все тендеры, включая неверифицированные.
//
// GET /v1/tenders
func (UnimplementedHandler) V1TendersGet(ctx context.Context, params V1TendersGetParams) (r V1TendersGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersPost implements POST /v1/tenders operation.
//
// Creates a new tender.
//
// POST /v1/tenders
func (UnimplementedHandler) V1TendersPost(ctx context.Context, req *V1TendersPostReq) (r V1TendersPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDAdditionsGet implements GET /v1/tenders/{tenderID}/additions operation.
//
// Получение дополнительной информации для тендера.
// Создатель тендера не имеет ограничений на статус
// верификации.
//
// GET /v1/tenders/{tenderID}/additions
func (UnimplementedHandler) V1TendersTenderIDAdditionsGet(ctx context.Context, params V1TendersTenderIDAdditionsGetParams) (r V1TendersTenderIDAdditionsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDAdditionsPost implements POST /v1/tenders/{tenderID}/additions operation.
//
// Добавление дополнительной информации к тендеру.
//
// POST /v1/tenders/{tenderID}/additions
func (UnimplementedHandler) V1TendersTenderIDAdditionsPost(ctx context.Context, req *V1TendersTenderIDAdditionsPostReq, params V1TendersTenderIDAdditionsPostParams) (r V1TendersTenderIDAdditionsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDGet implements GET /v1/tenders/{tenderID} operation.
//
// Returns tender by id
// Для получения неверифицированного тендера
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/tenders/{tenderID}
func (UnimplementedHandler) V1TendersTenderIDGet(ctx context.Context, params V1TendersTenderIDGetParams) (r V1TendersTenderIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDPut implements PUT /v1/tenders/{tenderID} operation.
//
// Update tender by id.
//
// PUT /v1/tenders/{tenderID}
func (UnimplementedHandler) V1TendersTenderIDPut(ctx context.Context, req *V1TendersTenderIDPutReq, params V1TendersTenderIDPutParams) (r V1TendersTenderIDPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDQuestionAnswerGet implements GET /v1/tenders/{tenderID}/question-answer operation.
//
// Получение вопросов-ответов с фильтрацией:
// 1. **Создатель тендера**: вопросы со статусом approved, все
// ответы.
// 2. **Авторизированный пользователь**: все свои вопросы;
// остальные вопросы и ответы со статусом approved.
// 3. **Неавторизированный пользователь**: вопросы и
// ответы статусом approved.
//
// GET /v1/tenders/{tenderID}/question-answer
func (UnimplementedHandler) V1TendersTenderIDQuestionAnswerGet(ctx context.Context, params V1TendersTenderIDQuestionAnswerGetParams) (r V1TendersTenderIDQuestionAnswerGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDQuestionAnswerPost implements POST /v1/tenders/{tenderID}/question-answer operation.
//
// Заказчик: Отвечает на вопрос
// Исполнитель: Создает вопрос для тендера.
//
// POST /v1/tenders/{tenderID}/question-answer
func (UnimplementedHandler) V1TendersTenderIDQuestionAnswerPost(ctx context.Context, req *V1TendersTenderIDQuestionAnswerPostReq, params V1TendersTenderIDQuestionAnswerPostParams) (r V1TendersTenderIDQuestionAnswerPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDRespondGet implements GET /v1/tenders/{tenderID}/respond operation.
//
// Получить все отклики на тендер.
//
// GET /v1/tenders/{tenderID}/respond
func (UnimplementedHandler) V1TendersTenderIDRespondGet(ctx context.Context, params V1TendersTenderIDRespondGetParams) (r V1TendersTenderIDRespondGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDRespondPost implements POST /v1/tenders/{tenderID}/respond operation.
//
// Отправить отклик на тендер.
//
// POST /v1/tenders/{tenderID}/respond
func (UnimplementedHandler) V1TendersTenderIDRespondPost(ctx context.Context, req *V1TendersTenderIDRespondPostReq, params V1TendersTenderIDRespondPostParams) (r V1TendersTenderIDRespondPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDWinnersGet implements GET /v1/tenders/{tenderID}/winners operation.
//
// Получение победителей торгов.
//
// GET /v1/tenders/{tenderID}/winners
func (UnimplementedHandler) V1TendersTenderIDWinnersGet(ctx context.Context, params V1TendersTenderIDWinnersGetParams) (r V1TendersTenderIDWinnersGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersTenderIDWinnersPost implements POST /v1/tenders/{tenderID}/winners operation.
//
// Добавление победителя торгов.
//
// POST /v1/tenders/{tenderID}/winners
func (UnimplementedHandler) V1TendersTenderIDWinnersPost(ctx context.Context, params V1TendersTenderIDWinnersPostParams) (r V1TendersTenderIDWinnersPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersWinnersWinnerIDAprovePost implements POST /v1/tenders/winners/{winnerID}/aprove operation.
//
// Подтверждение выполнения работы.
//
// POST /v1/tenders/winners/{winnerID}/aprove
func (UnimplementedHandler) V1TendersWinnersWinnerIDAprovePost(ctx context.Context, params V1TendersWinnersWinnerIDAprovePostParams) (r V1TendersWinnersWinnerIDAprovePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1TendersWinnersWinnerIDDenyPost implements POST /v1/tenders/winners/{winnerID}/deny operation.
//
// Отказ от выполнения работы.
//
// POST /v1/tenders/winners/{winnerID}/deny
func (UnimplementedHandler) V1TendersWinnersWinnerIDDenyPost(ctx context.Context, params V1TendersWinnersWinnerIDDenyPostParams) (r V1TendersWinnersWinnerIDDenyPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersConfirmEmailPost implements POST /v1/users/confirm/email operation.
//
// Confirm email use a code from mail.
//
// POST /v1/users/confirm/email
func (UnimplementedHandler) V1UsersConfirmEmailPost(ctx context.Context, req *V1UsersConfirmEmailPostReq) (r V1UsersConfirmEmailPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersConfirmPasswordPost implements POST /v1/users/confirm/password operation.
//
// Confirm reset password use a code from mail.
//
// POST /v1/users/confirm/password
func (UnimplementedHandler) V1UsersConfirmPasswordPost(ctx context.Context, req *V1UsersConfirmPasswordPostReq) (r V1UsersConfirmPasswordPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersGet implements GET /v1/users operation.
//
// Returns all users
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/users
func (UnimplementedHandler) V1UsersGet(ctx context.Context, params V1UsersGetParams) (r V1UsersGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersRequestEmailVerificationPost implements POST /v1/users/request/email-verification operation.
//
// Requesting send verify code.
//
// POST /v1/users/request/email-verification
func (UnimplementedHandler) V1UsersRequestEmailVerificationPost(ctx context.Context, req *V1UsersRequestEmailVerificationPostReq) (r V1UsersRequestEmailVerificationPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersRequestResetPasswordPost implements POST /v1/users/request/reset-password operation.
//
// Requesting send reset code.
//
// POST /v1/users/request/reset-password
func (UnimplementedHandler) V1UsersRequestResetPasswordPost(ctx context.Context, req *V1UsersRequestResetPasswordPostReq) (r V1UsersRequestResetPasswordPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersUserIDGet implements GET /v1/users/{userID} operation.
//
// Returns user by id
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/users/{userID}
func (UnimplementedHandler) V1UsersUserIDGet(ctx context.Context, params V1UsersUserIDGetParams) (r V1UsersUserIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1UsersUserIDPut implements PUT /v1/users/{userID} operation.
//
// Обновляет информацию профиля пользователя.
//
// PUT /v1/users/{userID}
func (UnimplementedHandler) V1UsersUserIDPut(ctx context.Context, req *V1UsersUserIDPutReq, params V1UsersUserIDPutParams) (r V1UsersUserIDPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsAdditionsGet implements GET /v1/verifications/additions operation.
//
// Получение запросов на верификацию для
// дополнительной информации о тендерах
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/verifications/additions
func (UnimplementedHandler) V1VerificationsAdditionsGet(ctx context.Context, params V1VerificationsAdditionsGetParams) (r V1VerificationsAdditionsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsOrganizationsGet implements GET /v1/verifications/organizations operation.
//
// Получение всех запросов на верификацию для
// организаций
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/verifications/organizations
func (UnimplementedHandler) V1VerificationsOrganizationsGet(ctx context.Context, params V1VerificationsOrganizationsGetParams) (r V1VerificationsOrganizationsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsOrganizationsOrganizationIDGet implements GET /v1/verifications/organizations/{organizationID} operation.
//
// Получает историю верификации организации.
//
// GET /v1/verifications/organizations/{organizationID}
func (UnimplementedHandler) V1VerificationsOrganizationsOrganizationIDGet(ctx context.Context, params V1VerificationsOrganizationsOrganizationIDGetParams) (r V1VerificationsOrganizationsOrganizationIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsOrganizationsOrganizationIDPost implements POST /v1/verifications/organizations/{organizationID} operation.
//
// Отправляет документы организации на верификацию.
//
// POST /v1/verifications/organizations/{organizationID}
func (UnimplementedHandler) V1VerificationsOrganizationsOrganizationIDPost(ctx context.Context, req []Attachment, params V1VerificationsOrganizationsOrganizationIDPostParams) (r V1VerificationsOrganizationsOrganizationIDPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsQuestionAnswerGet implements GET /v1/verifications/question-answer operation.
//
// Получение запросов на верификацию для
// вопросов-ответов
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/verifications/question-answer
func (UnimplementedHandler) V1VerificationsQuestionAnswerGet(ctx context.Context, params V1VerificationsQuestionAnswerGetParams) (r V1VerificationsQuestionAnswerGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsRequestIDAprovePost implements POST /v1/verifications/{requestID}/aprove operation.
//
// Aproving verification
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// POST /v1/verifications/{requestID}/aprove
func (UnimplementedHandler) V1VerificationsRequestIDAprovePost(ctx context.Context, params V1VerificationsRequestIDAprovePostParams) (r V1VerificationsRequestIDAprovePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsRequestIDDenyPost implements POST /v1/verifications/{requestID}/deny operation.
//
// Denying verification
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// POST /v1/verifications/{requestID}/deny
func (UnimplementedHandler) V1VerificationsRequestIDDenyPost(ctx context.Context, req *V1VerificationsRequestIDDenyPostReq, params V1VerificationsRequestIDDenyPostParams) (r V1VerificationsRequestIDDenyPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsRequestIDGet implements GET /v1/verifications/{requestID} operation.
//
// Returns verification request by id
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/verifications/{requestID}
func (UnimplementedHandler) V1VerificationsRequestIDGet(ctx context.Context, params V1VerificationsRequestIDGetParams) (r V1VerificationsRequestIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1VerificationsTendersGet implements GET /v1/verifications/tenders operation.
//
// Получение запросов на верификацию для тендеров
// **[Role](https://youtrack.ubrato.ru/articles/UBR-A-7/Roli-privilegii) required**:
// 'Employee' or higher.
//
// GET /v1/verifications/tenders
func (UnimplementedHandler) V1VerificationsTendersGet(ctx context.Context, params V1VerificationsTendersGetParams) (r V1VerificationsTendersGetRes, _ error) {
	return r, ht.ErrNotImplemented
}
