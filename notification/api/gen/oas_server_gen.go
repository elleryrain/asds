// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1NotificationsNotificationIDReadPost implements POST /v1/notifications/{notificationID}/read operation.
	//
	// Помечает уведомление как прочитанное.
	//
	// POST /v1/notifications/{notificationID}/read
	V1NotificationsNotificationIDReadPost(ctx context.Context, params V1NotificationsNotificationIDReadPostParams) (V1NotificationsNotificationIDReadPostRes, error)
	// V1NotificationsUserIDGet implements GET /v1/notifications/{userID} operation.
	//
	// Возвращает историю уведомлений для указанного
	// пользователя.
	//
	// GET /v1/notifications/{userID}
	V1NotificationsUserIDGet(ctx context.Context, params V1NotificationsUserIDGetParams) (V1NotificationsUserIDGetRes, error)
	// V1NotificationsUserIDStreamGet implements GET /v1/notifications/{userID}/stream operation.
	//
	// **Не работает в свагере**
	// Подключение для получения актуальных уведомлений
	// пользователя через SSE.
	//
	// GET /v1/notifications/{userID}/stream
	V1NotificationsUserIDStreamGet(ctx context.Context, params V1NotificationsUserIDStreamGetParams) (V1NotificationsUserIDStreamGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
