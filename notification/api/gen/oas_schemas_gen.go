// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #
type ActionButton struct {
	Text   string  `json:"text"`
	URL    url.URL `json:"url"`
	Styled bool    `json:"styled"`
}

// GetText returns the value of Text.
func (s *ActionButton) GetText() string {
	return s.Text
}

// GetURL returns the value of URL.
func (s *ActionButton) GetURL() url.URL {
	return s.URL
}

// GetStyled returns the value of Styled.
func (s *ActionButton) GetStyled() bool {
	return s.Styled
}

// SetText sets the value of Text.
func (s *ActionButton) SetText(val string) {
	s.Text = val
}

// SetURL sets the value of URL.
func (s *ActionButton) SetURL(val url.URL) {
	s.URL = val
}

// SetStyled sets the value of Styled.
func (s *ActionButton) SetStyled(val bool) {
	s.Styled = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #
type Error struct {
	// Application-specific error code.
	Code string `json:"code"`
	// Error message.
	Message string       `json:"message"`
	Details ErrorDetails `json:"details"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() ErrorDetails {
	return s.Details
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val ErrorDetails) {
	s.Details = val
}

type ErrorDetails map[string]jx.Raw

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// ErrorStatusCode wraps WrappedError with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   WrappedError
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() WrappedError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val WrappedError) {
	s.Response = val
}

func (*ErrorStatusCode) v1NotificationsNotificationIDReadPostRes() {}
func (*ErrorStatusCode) v1NotificationsUserIDGetRes()              {}
func (*ErrorStatusCode) v1NotificationsUserIDStreamGetRes()        {}

// Ref: #
type Notification struct {
	ID           int             `json:"id"`
	UserID       int             `json:"user_id"`
	Title        string          `json:"title"`
	Comment      OptString       `json:"comment"`
	ActionButton OptActionButton `json:"actionButton"`
	StatusBlock  OptStatusBlock  `json:"statusBlock"`
	IsRead       bool            `json:"is_read"`
}

// GetID returns the value of ID.
func (s *Notification) GetID() int {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *Notification) GetUserID() int {
	return s.UserID
}

// GetTitle returns the value of Title.
func (s *Notification) GetTitle() string {
	return s.Title
}

// GetComment returns the value of Comment.
func (s *Notification) GetComment() OptString {
	return s.Comment
}

// GetActionButton returns the value of ActionButton.
func (s *Notification) GetActionButton() OptActionButton {
	return s.ActionButton
}

// GetStatusBlock returns the value of StatusBlock.
func (s *Notification) GetStatusBlock() OptStatusBlock {
	return s.StatusBlock
}

// GetIsRead returns the value of IsRead.
func (s *Notification) GetIsRead() bool {
	return s.IsRead
}

// SetID sets the value of ID.
func (s *Notification) SetID(val int) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *Notification) SetUserID(val int) {
	s.UserID = val
}

// SetTitle sets the value of Title.
func (s *Notification) SetTitle(val string) {
	s.Title = val
}

// SetComment sets the value of Comment.
func (s *Notification) SetComment(val OptString) {
	s.Comment = val
}

// SetActionButton sets the value of ActionButton.
func (s *Notification) SetActionButton(val OptActionButton) {
	s.ActionButton = val
}

// SetStatusBlock sets the value of StatusBlock.
func (s *Notification) SetStatusBlock(val OptStatusBlock) {
	s.StatusBlock = val
}

// SetIsRead sets the value of IsRead.
func (s *Notification) SetIsRead(val bool) {
	s.IsRead = val
}

// NewOptActionButton returns new OptActionButton with value set to v.
func NewOptActionButton(v ActionButton) OptActionButton {
	return OptActionButton{
		Value: v,
		Set:   true,
	}
}

// OptActionButton is optional ActionButton.
type OptActionButton struct {
	Value ActionButton
	Set   bool
}

// IsSet returns true if OptActionButton was set.
func (o OptActionButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActionButton) Reset() {
	var v ActionButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActionButton) SetTo(v ActionButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActionButton) Get() (v ActionButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActionButton) Or(d ActionButton) ActionButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatusBlock returns new OptStatusBlock with value set to v.
func NewOptStatusBlock(v StatusBlock) OptStatusBlock {
	return OptStatusBlock{
		Value: v,
		Set:   true,
	}
}

// OptStatusBlock is optional StatusBlock.
type OptStatusBlock struct {
	Value StatusBlock
	Set   bool
}

// IsSet returns true if OptStatusBlock was set.
func (o OptStatusBlock) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatusBlock) Reset() {
	var v StatusBlock
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatusBlock) SetTo(v StatusBlock) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatusBlock) Get() (v StatusBlock, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatusBlock) Or(d StatusBlock) StatusBlock {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type Status string

const (
	StatusInvalid  Status = "invalid"
	StatusInReview Status = "in_review"
	StatusDeclined Status = "declined"
	StatusApproved Status = "approved"
)

// AllValues returns all Status values.
func (Status) AllValues() []Status {
	return []Status{
		StatusInvalid,
		StatusInReview,
		StatusDeclined,
		StatusApproved,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Status) MarshalText() ([]byte, error) {
	switch s {
	case StatusInvalid:
		return []byte(s), nil
	case StatusInReview:
		return []byte(s), nil
	case StatusDeclined:
		return []byte(s), nil
	case StatusApproved:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Status) UnmarshalText(data []byte) error {
	switch Status(data) {
	case StatusInvalid:
		*s = StatusInvalid
		return nil
	case StatusInReview:
		*s = StatusInReview
		return nil
	case StatusDeclined:
		*s = StatusDeclined
		return nil
	case StatusApproved:
		*s = StatusApproved
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type StatusBlock struct {
	Text   string `json:"text"`
	Status Status `json:"status"`
}

// GetText returns the value of Text.
func (s *StatusBlock) GetText() string {
	return s.Text
}

// GetStatus returns the value of Status.
func (s *StatusBlock) GetStatus() Status {
	return s.Status
}

// SetText sets the value of Text.
func (s *StatusBlock) SetText(val string) {
	s.Text = val
}

// SetStatus sets the value of Status.
func (s *StatusBlock) SetStatus(val Status) {
	s.Status = val
}

type V1NotificationsNotificationIDReadPostForbidden WrappedError

func (*V1NotificationsNotificationIDReadPostForbidden) v1NotificationsNotificationIDReadPostRes() {}

type V1NotificationsNotificationIDReadPostNotFound WrappedError

func (*V1NotificationsNotificationIDReadPostNotFound) v1NotificationsNotificationIDReadPostRes() {}

// V1NotificationsNotificationIDReadPostOK is response for V1NotificationsNotificationIDReadPost operation.
type V1NotificationsNotificationIDReadPostOK struct{}

func (*V1NotificationsNotificationIDReadPostOK) v1NotificationsNotificationIDReadPostRes() {}

type V1NotificationsUserIDGetForbidden WrappedError

func (*V1NotificationsUserIDGetForbidden) v1NotificationsUserIDGetRes() {}

type V1NotificationsUserIDGetNotFound WrappedError

func (*V1NotificationsUserIDGetNotFound) v1NotificationsUserIDGetRes() {}

type V1NotificationsUserIDGetOK struct {
	Data []Notification `json:"data"`
}

// GetData returns the value of Data.
func (s *V1NotificationsUserIDGetOK) GetData() []Notification {
	return s.Data
}

// SetData sets the value of Data.
func (s *V1NotificationsUserIDGetOK) SetData(val []Notification) {
	s.Data = val
}

func (*V1NotificationsUserIDGetOK) v1NotificationsUserIDGetRes() {}

type V1NotificationsUserIDStreamGetForbidden WrappedError

func (*V1NotificationsUserIDStreamGetForbidden) v1NotificationsUserIDStreamGetRes() {}

type V1NotificationsUserIDStreamGetNotFound WrappedError

func (*V1NotificationsUserIDStreamGetNotFound) v1NotificationsUserIDStreamGetRes() {}

type V1NotificationsUserIDStreamGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s V1NotificationsUserIDStreamGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*V1NotificationsUserIDStreamGetOK) v1NotificationsUserIDStreamGetRes() {}

// Ref: #
type WrappedError struct {
	Error Error `json:"error"`
}

// GetError returns the value of Error.
func (s *WrappedError) GetError() Error {
	return s.Error
}

// SetError sets the value of Error.
func (s *WrappedError) SetError(val Error) {
	s.Error = val
}
