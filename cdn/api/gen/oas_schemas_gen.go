// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #
type Error struct {
	// Application-specific error code.
	Code string `json:"code"`
	// Error message.
	Message string       `json:"message"`
	Details ErrorDetails `json:"details"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() ErrorDetails {
	return s.Details
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val ErrorDetails) {
	s.Details = val
}

type ErrorDetails map[string]jx.Raw

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// ErrorStatusCode wraps WrappedError with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   WrappedError
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() WrappedError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val WrappedError) {
	s.Response = val
}

func (*ErrorStatusCode) fileIDGetRes()  {}
func (*ErrorStatusCode) fileIDHeadRes() {}
func (*ErrorStatusCode) uploadPostRes() {}

type FileIDGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s FileIDGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// FileIDGetOKHeaders wraps FileIDGetOK with response headers.
type FileIDGetOKHeaders struct {
	ContentLength int
	LastModified  time.Time
	XFileType     string
	Response      FileIDGetOK
}

// GetContentLength returns the value of ContentLength.
func (s *FileIDGetOKHeaders) GetContentLength() int {
	return s.ContentLength
}

// GetLastModified returns the value of LastModified.
func (s *FileIDGetOKHeaders) GetLastModified() time.Time {
	return s.LastModified
}

// GetXFileType returns the value of XFileType.
func (s *FileIDGetOKHeaders) GetXFileType() string {
	return s.XFileType
}

// GetResponse returns the value of Response.
func (s *FileIDGetOKHeaders) GetResponse() FileIDGetOK {
	return s.Response
}

// SetContentLength sets the value of ContentLength.
func (s *FileIDGetOKHeaders) SetContentLength(val int) {
	s.ContentLength = val
}

// SetLastModified sets the value of LastModified.
func (s *FileIDGetOKHeaders) SetLastModified(val time.Time) {
	s.LastModified = val
}

// SetXFileType sets the value of XFileType.
func (s *FileIDGetOKHeaders) SetXFileType(val string) {
	s.XFileType = val
}

// SetResponse sets the value of Response.
func (s *FileIDGetOKHeaders) SetResponse(val FileIDGetOK) {
	s.Response = val
}

func (*FileIDGetOKHeaders) fileIDGetRes() {}

// FileIDHeadOK is response for FileIDHead operation.
type FileIDHeadOK struct {
	ContentLength int
	LastModified  time.Time
	XFileType     string
}

// GetContentLength returns the value of ContentLength.
func (s *FileIDHeadOK) GetContentLength() int {
	return s.ContentLength
}

// GetLastModified returns the value of LastModified.
func (s *FileIDHeadOK) GetLastModified() time.Time {
	return s.LastModified
}

// GetXFileType returns the value of XFileType.
func (s *FileIDHeadOK) GetXFileType() string {
	return s.XFileType
}

// SetContentLength sets the value of ContentLength.
func (s *FileIDHeadOK) SetContentLength(val int) {
	s.ContentLength = val
}

// SetLastModified sets the value of LastModified.
func (s *FileIDHeadOK) SetLastModified(val time.Time) {
	s.LastModified = val
}

// SetXFileType sets the value of XFileType.
func (s *FileIDHeadOK) SetXFileType(val string) {
	s.XFileType = val
}

func (*FileIDHeadOK) fileIDHeadRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UploadPostCreated struct {
	Data UploadPostCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *UploadPostCreated) GetData() UploadPostCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *UploadPostCreated) SetData(val UploadPostCreatedData) {
	s.Data = val
}

func (*UploadPostCreated) uploadPostRes() {}

type UploadPostCreatedData struct {
	Key string `json:"key"`
}

// GetKey returns the value of Key.
func (s *UploadPostCreatedData) GetKey() string {
	return s.Key
}

// SetKey sets the value of Key.
func (s *UploadPostCreatedData) SetKey(val string) {
	s.Key = val
}

type UploadPostReq struct {
	File OptMultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadPostReq) GetFile() OptMultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadPostReq) SetFile(val OptMultipartFile) {
	s.File = val
}

// Ref: #
type WrappedError struct {
	Error Error `json:"error"`
}

// GetError returns the value of Error.
func (s *WrappedError) GetError() Error {
	return s.Error
}

// SetError sets the value of Error.
func (s *WrappedError) SetError(val Error) {
	s.Error = val
}
