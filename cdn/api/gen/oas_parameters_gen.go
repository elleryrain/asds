// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// FileIDGetParams is parameters of GET /file/{id} operation.
type FileIDGetParams struct {
	// Уникальный идентификатор файла.
	ID string
}

func unpackFileIDGetParams(packed middleware.Parameters) (params FileIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeFileIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params FileIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// FileIDHeadParams is parameters of HEAD /file/{id} operation.
type FileIDHeadParams struct {
	// Уникальный идентификатор файла.
	ID string
}

func unpackFileIDHeadParams(packed middleware.Parameters) (params FileIDHeadParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeFileIDHeadParams(args [1]string, argsEscaped bool, r *http.Request) (params FileIDHeadParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadPostParams is parameters of POST /upload operation.
type UploadPostParams struct {
	// Загрузить файл в приватном режиме.
	IsPrivate OptBool
}

func unpackUploadPostParams(packed middleware.Parameters) (params UploadPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "is_private",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsPrivate = v.(OptBool)
		}
	}
	return params
}

func decodeUploadPostParams(args [0]string, argsEscaped bool, r *http.Request) (params UploadPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: is_private.
	{
		val := bool(false)
		params.IsPrivate.SetTo(val)
	}
	// Decode query: is_private.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "is_private",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsPrivateVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIsPrivateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IsPrivate.SetTo(paramsDotIsPrivateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "is_private",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
